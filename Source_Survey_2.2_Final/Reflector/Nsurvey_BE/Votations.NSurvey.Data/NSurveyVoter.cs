//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2300
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Votations.NSurvey.Data {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class NSurveyVoter : DataSet {
        
        private VoterDataTable tableVoter;
        
        private QuestionDataTable tableQuestion;
        
        private AnswerDataTable tableAnswer;
        
        private DataRelation relationQuestionAnswer;
        
        private DataRelation relationVoterQuestion;
        
        public NSurveyVoter() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected NSurveyVoter(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Voter"] != null)) {
                    this.Tables.Add(new VoterDataTable(ds.Tables["Voter"]));
                }
                if ((ds.Tables["Question"] != null)) {
                    this.Tables.Add(new QuestionDataTable(ds.Tables["Question"]));
                }
                if ((ds.Tables["Answer"] != null)) {
                    this.Tables.Add(new AnswerDataTable(ds.Tables["Answer"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public VoterDataTable Voter {
            get {
                return this.tableVoter;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public QuestionDataTable Question {
            get {
                return this.tableQuestion;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AnswerDataTable Answer {
            get {
                return this.tableAnswer;
            }
        }
        
        public override DataSet Clone() {
            NSurveyVoter cln = ((NSurveyVoter)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Voter"] != null)) {
                this.Tables.Add(new VoterDataTable(ds.Tables["Voter"]));
            }
            if ((ds.Tables["Question"] != null)) {
                this.Tables.Add(new QuestionDataTable(ds.Tables["Question"]));
            }
            if ((ds.Tables["Answer"] != null)) {
                this.Tables.Add(new AnswerDataTable(ds.Tables["Answer"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableVoter = ((VoterDataTable)(this.Tables["Voter"]));
            if ((this.tableVoter != null)) {
                this.tableVoter.InitVars();
            }
            this.tableQuestion = ((QuestionDataTable)(this.Tables["Question"]));
            if ((this.tableQuestion != null)) {
                this.tableQuestion.InitVars();
            }
            this.tableAnswer = ((AnswerDataTable)(this.Tables["Answer"]));
            if ((this.tableAnswer != null)) {
                this.tableAnswer.InitVars();
            }
            this.relationQuestionAnswer = this.Relations["QuestionAnswer"];
            this.relationVoterQuestion = this.Relations["VoterQuestion"];
        }
        
        private void InitClass() {
            this.DataSetName = "NSurveyVoter";
            this.Prefix = "";
            this.Namespace = "http://www.nsurvey.org/NSurveyVoter.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableVoter = new VoterDataTable();
            this.Tables.Add(this.tableVoter);
            this.tableQuestion = new QuestionDataTable();
            this.Tables.Add(this.tableQuestion);
            this.tableAnswer = new AnswerDataTable();
            this.Tables.Add(this.tableAnswer);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("VoterQuestion", new DataColumn[] {
                        this.tableVoter.VoterIDColumn}, new DataColumn[] {
                        this.tableQuestion.VoterIDColumn});
            this.tableQuestion.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("QuestionAnswer", new DataColumn[] {
                        this.tableQuestion.VoterIDColumn,
                        this.tableQuestion.QuestionIdColumn}, new DataColumn[] {
                        this.tableAnswer.VoterIdColumn,
                        this.tableAnswer.QuestionIdColumn});
            this.tableAnswer.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationQuestionAnswer = new DataRelation("QuestionAnswer", new DataColumn[] {
                        this.tableQuestion.VoterIDColumn,
                        this.tableQuestion.QuestionIdColumn}, new DataColumn[] {
                        this.tableAnswer.VoterIdColumn,
                        this.tableAnswer.QuestionIdColumn}, false);
            this.relationQuestionAnswer.Nested = true;
            this.Relations.Add(this.relationQuestionAnswer);
            this.relationVoterQuestion = new DataRelation("VoterQuestion", new DataColumn[] {
                        this.tableVoter.VoterIDColumn}, new DataColumn[] {
                        this.tableQuestion.VoterIDColumn}, false);
            this.relationVoterQuestion.Nested = true;
            this.Relations.Add(this.relationVoterQuestion);
        }
        
        private bool ShouldSerializeVoter() {
            return false;
        }
        
        private bool ShouldSerializeQuestion() {
            return false;
        }
        
        private bool ShouldSerializeAnswer() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void VoterRowChangeEventHandler(object sender, VoterRowChangeEvent e);
        
        public delegate void QuestionRowChangeEventHandler(object sender, QuestionRowChangeEvent e);
        
        public delegate void AnswerRowChangeEventHandler(object sender, AnswerRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VoterDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnVoterID;
            
            private DataColumn columnUID;
            
            private DataColumn columnSurveyID;
            
            private DataColumn columnContextUserName;
            
            private DataColumn columnVoteDate;
            
            private DataColumn columnStartDate;
            
            private DataColumn columnIPSource;
            
            private DataColumn columnEmail;
            
            private DataColumn columnLanguageCode;
            
            internal VoterDataTable() : 
                    base("Voter") {
                this.InitClass();
            }
            
            internal VoterDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn VoterIDColumn {
                get {
                    return this.columnVoterID;
                }
            }
            
            internal DataColumn UIDColumn {
                get {
                    return this.columnUID;
                }
            }
            
            internal DataColumn SurveyIDColumn {
                get {
                    return this.columnSurveyID;
                }
            }
            
            internal DataColumn ContextUserNameColumn {
                get {
                    return this.columnContextUserName;
                }
            }
            
            internal DataColumn VoteDateColumn {
                get {
                    return this.columnVoteDate;
                }
            }
            
            internal DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            internal DataColumn IPSourceColumn {
                get {
                    return this.columnIPSource;
                }
            }
            
            internal DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            internal DataColumn LanguageCodeColumn {
                get {
                    return this.columnLanguageCode;
                }
            }
            
            public VoterRow this[int index] {
                get {
                    return ((VoterRow)(this.Rows[index]));
                }
            }
            
            public event VoterRowChangeEventHandler VoterRowChanged;
            
            public event VoterRowChangeEventHandler VoterRowChanging;
            
            public event VoterRowChangeEventHandler VoterRowDeleted;
            
            public event VoterRowChangeEventHandler VoterRowDeleting;
            
            public void AddVoterRow(VoterRow row) {
                this.Rows.Add(row);
            }
            
            public VoterRow AddVoterRow(string UID, int SurveyID, string ContextUserName, System.DateTime VoteDate, System.DateTime StartDate, string IPSource, string Email, string LanguageCode) {
                VoterRow rowVoterRow = ((VoterRow)(this.NewRow()));
                rowVoterRow.ItemArray = new object[] {
                        null,
                        UID,
                        SurveyID,
                        ContextUserName,
                        VoteDate,
                        StartDate,
                        IPSource,
                        Email,
                        LanguageCode};
                this.Rows.Add(rowVoterRow);
                return rowVoterRow;
            }
            
            public VoterRow FindByVoterID(int VoterID) {
                return ((VoterRow)(this.Rows.Find(new object[] {
                            VoterID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                VoterDataTable cln = ((VoterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new VoterDataTable();
            }
            
            internal void InitVars() {
                this.columnVoterID = this.Columns["VoterID"];
                this.columnUID = this.Columns["UID"];
                this.columnSurveyID = this.Columns["SurveyID"];
                this.columnContextUserName = this.Columns["ContextUserName"];
                this.columnVoteDate = this.Columns["VoteDate"];
                this.columnStartDate = this.Columns["StartDate"];
                this.columnIPSource = this.Columns["IPSource"];
                this.columnEmail = this.Columns["Email"];
                this.columnLanguageCode = this.Columns["LanguageCode"];
            }
            
            private void InitClass() {
                this.columnVoterID = new DataColumn("VoterID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVoterID);
                this.columnUID = new DataColumn("UID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUID);
                this.columnSurveyID = new DataColumn("SurveyID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSurveyID);
                this.columnContextUserName = new DataColumn("ContextUserName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnContextUserName);
                this.columnVoteDate = new DataColumn("VoteDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVoteDate);
                this.columnStartDate = new DataColumn("StartDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStartDate);
                this.columnIPSource = new DataColumn("IPSource", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIPSource);
                this.columnEmail = new DataColumn("Email", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEmail);
                this.columnLanguageCode = new DataColumn("LanguageCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLanguageCode);
                this.Constraints.Add(new UniqueConstraint("NSurveyVoterKey2", new DataColumn[] {
                                this.columnVoterID}, true));
                this.columnVoterID.AutoIncrement = true;
                this.columnVoterID.AllowDBNull = false;
                this.columnVoterID.ReadOnly = true;
                this.columnVoterID.Unique = true;
            }
            
            public VoterRow NewVoterRow() {
                return ((VoterRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new VoterRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(VoterRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VoterRowChanged != null)) {
                    this.VoterRowChanged(this, new VoterRowChangeEvent(((VoterRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VoterRowChanging != null)) {
                    this.VoterRowChanging(this, new VoterRowChangeEvent(((VoterRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VoterRowDeleted != null)) {
                    this.VoterRowDeleted(this, new VoterRowChangeEvent(((VoterRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VoterRowDeleting != null)) {
                    this.VoterRowDeleting(this, new VoterRowChangeEvent(((VoterRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveVoterRow(VoterRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VoterRow : DataRow {
            
            private VoterDataTable tableVoter;
            
            internal VoterRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableVoter = ((VoterDataTable)(this.Table));
            }
            
            public int VoterID {
                get {
                    return ((int)(this[this.tableVoter.VoterIDColumn]));
                }
                set {
                    this[this.tableVoter.VoterIDColumn] = value;
                }
            }
            
            public string UID {
                get {
                    try {
                        return ((string)(this[this.tableVoter.UIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVoter.UIDColumn] = value;
                }
            }
            
            public int SurveyID {
                get {
                    try {
                        return ((int)(this[this.tableVoter.SurveyIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVoter.SurveyIDColumn] = value;
                }
            }
            
            public string ContextUserName {
                get {
                    try {
                        return ((string)(this[this.tableVoter.ContextUserNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVoter.ContextUserNameColumn] = value;
                }
            }
            
            public System.DateTime VoteDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableVoter.VoteDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVoter.VoteDateColumn] = value;
                }
            }
            
            public System.DateTime StartDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableVoter.StartDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVoter.StartDateColumn] = value;
                }
            }
            
            public string IPSource {
                get {
                    try {
                        return ((string)(this[this.tableVoter.IPSourceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVoter.IPSourceColumn] = value;
                }
            }
            
            public string Email {
                get {
                    try {
                        return ((string)(this[this.tableVoter.EmailColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVoter.EmailColumn] = value;
                }
            }
            
            public string LanguageCode {
                get {
                    try {
                        return ((string)(this[this.tableVoter.LanguageCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVoter.LanguageCodeColumn] = value;
                }
            }
            
            public bool IsUIDNull() {
                return this.IsNull(this.tableVoter.UIDColumn);
            }
            
            public void SetUIDNull() {
                this[this.tableVoter.UIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsSurveyIDNull() {
                return this.IsNull(this.tableVoter.SurveyIDColumn);
            }
            
            public void SetSurveyIDNull() {
                this[this.tableVoter.SurveyIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsContextUserNameNull() {
                return this.IsNull(this.tableVoter.ContextUserNameColumn);
            }
            
            public void SetContextUserNameNull() {
                this[this.tableVoter.ContextUserNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsVoteDateNull() {
                return this.IsNull(this.tableVoter.VoteDateColumn);
            }
            
            public void SetVoteDateNull() {
                this[this.tableVoter.VoteDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsStartDateNull() {
                return this.IsNull(this.tableVoter.StartDateColumn);
            }
            
            public void SetStartDateNull() {
                this[this.tableVoter.StartDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsIPSourceNull() {
                return this.IsNull(this.tableVoter.IPSourceColumn);
            }
            
            public void SetIPSourceNull() {
                this[this.tableVoter.IPSourceColumn] = System.Convert.DBNull;
            }
            
            public bool IsEmailNull() {
                return this.IsNull(this.tableVoter.EmailColumn);
            }
            
            public void SetEmailNull() {
                this[this.tableVoter.EmailColumn] = System.Convert.DBNull;
            }
            
            public bool IsLanguageCodeNull() {
                return this.IsNull(this.tableVoter.LanguageCodeColumn);
            }
            
            public void SetLanguageCodeNull() {
                this[this.tableVoter.LanguageCodeColumn] = System.Convert.DBNull;
            }
            
            public QuestionRow[] GetQuestionRows() {
                return ((QuestionRow[])(this.GetChildRows(this.Table.ChildRelations["VoterQuestion"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VoterRowChangeEvent : EventArgs {
            
            private VoterRow eventRow;
            
            private DataRowAction eventAction;
            
            public VoterRowChangeEvent(VoterRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public VoterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class QuestionDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnQuestionText;
            
            private DataColumn columnVoterID;
            
            private DataColumn columnQuestionId;
            
            internal QuestionDataTable() : 
                    base("Question") {
                this.InitClass();
            }
            
            internal QuestionDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn QuestionTextColumn {
                get {
                    return this.columnQuestionText;
                }
            }
            
            internal DataColumn VoterIDColumn {
                get {
                    return this.columnVoterID;
                }
            }
            
            internal DataColumn QuestionIdColumn {
                get {
                    return this.columnQuestionId;
                }
            }
            
            public QuestionRow this[int index] {
                get {
                    return ((QuestionRow)(this.Rows[index]));
                }
            }
            
            public event QuestionRowChangeEventHandler QuestionRowChanged;
            
            public event QuestionRowChangeEventHandler QuestionRowChanging;
            
            public event QuestionRowChangeEventHandler QuestionRowDeleted;
            
            public event QuestionRowChangeEventHandler QuestionRowDeleting;
            
            public void AddQuestionRow(QuestionRow row) {
                this.Rows.Add(row);
            }
            
            public QuestionRow AddQuestionRow(string QuestionText, VoterRow parentVoterRowByVoterQuestion) {
                QuestionRow rowQuestionRow = ((QuestionRow)(this.NewRow()));
                rowQuestionRow.ItemArray = new object[] {
                        QuestionText,
                        parentVoterRowByVoterQuestion[0],
                        null};
                this.Rows.Add(rowQuestionRow);
                return rowQuestionRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                QuestionDataTable cln = ((QuestionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new QuestionDataTable();
            }
            
            internal void InitVars() {
                this.columnQuestionText = this.Columns["QuestionText"];
                this.columnVoterID = this.Columns["VoterID"];
                this.columnQuestionId = this.Columns["QuestionId"];
            }
            
            private void InitClass() {
                this.columnQuestionText = new DataColumn("QuestionText", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnQuestionText);
                this.columnVoterID = new DataColumn("VoterID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVoterID);
                this.columnQuestionId = new DataColumn("QuestionId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnQuestionId);
                this.Constraints.Add(new UniqueConstraint("NSurveyVoterKey1", new DataColumn[] {
                                this.columnVoterID,
                                this.columnQuestionId}, false));
                this.columnVoterID.AllowDBNull = false;
                this.columnQuestionId.AutoIncrement = true;
                this.columnQuestionId.AllowDBNull = false;
                this.columnQuestionId.ReadOnly = true;
            }
            
            public QuestionRow NewQuestionRow() {
                return ((QuestionRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new QuestionRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(QuestionRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.QuestionRowChanged != null)) {
                    this.QuestionRowChanged(this, new QuestionRowChangeEvent(((QuestionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.QuestionRowChanging != null)) {
                    this.QuestionRowChanging(this, new QuestionRowChangeEvent(((QuestionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.QuestionRowDeleted != null)) {
                    this.QuestionRowDeleted(this, new QuestionRowChangeEvent(((QuestionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.QuestionRowDeleting != null)) {
                    this.QuestionRowDeleting(this, new QuestionRowChangeEvent(((QuestionRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveQuestionRow(QuestionRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class QuestionRow : DataRow {
            
            private QuestionDataTable tableQuestion;
            
            internal QuestionRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableQuestion = ((QuestionDataTable)(this.Table));
            }
            
            public string QuestionText {
                get {
                    try {
                        return ((string)(this[this.tableQuestion.QuestionTextColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuestion.QuestionTextColumn] = value;
                }
            }
            
            public int VoterID {
                get {
                    return ((int)(this[this.tableQuestion.VoterIDColumn]));
                }
                set {
                    this[this.tableQuestion.VoterIDColumn] = value;
                }
            }
            
            public int QuestionId {
                get {
                    return ((int)(this[this.tableQuestion.QuestionIdColumn]));
                }
                set {
                    this[this.tableQuestion.QuestionIdColumn] = value;
                }
            }
            
            public VoterRow VoterRow {
                get {
                    return ((VoterRow)(this.GetParentRow(this.Table.ParentRelations["VoterQuestion"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["VoterQuestion"]);
                }
            }
            
            public bool IsQuestionTextNull() {
                return this.IsNull(this.tableQuestion.QuestionTextColumn);
            }
            
            public void SetQuestionTextNull() {
                this[this.tableQuestion.QuestionTextColumn] = System.Convert.DBNull;
            }
            
            public AnswerRow[] GetAnswerRows() {
                return ((AnswerRow[])(this.GetChildRows(this.Table.ChildRelations["QuestionAnswer"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class QuestionRowChangeEvent : EventArgs {
            
            private QuestionRow eventRow;
            
            private DataRowAction eventAction;
            
            public QuestionRowChangeEvent(QuestionRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public QuestionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AnswerDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnAnswerID;
            
            private DataColumn columnAnswer;
            
            private DataColumn columnVoterAnswer;
            
            private DataColumn columnVoterId;
            
            private DataColumn columnQuestionId;
            
            private DataColumn columnSectionNumber;
            
            internal AnswerDataTable() : 
                    base("Answer") {
                this.InitClass();
            }
            
            internal AnswerDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn AnswerIDColumn {
                get {
                    return this.columnAnswerID;
                }
            }
            
            internal DataColumn AnswerColumn {
                get {
                    return this.columnAnswer;
                }
            }
            
            internal DataColumn VoterAnswerColumn {
                get {
                    return this.columnVoterAnswer;
                }
            }
            
            internal DataColumn VoterIdColumn {
                get {
                    return this.columnVoterId;
                }
            }
            
            internal DataColumn QuestionIdColumn {
                get {
                    return this.columnQuestionId;
                }
            }
            
            internal DataColumn SectionNumberColumn {
                get {
                    return this.columnSectionNumber;
                }
            }
            
            public AnswerRow this[int index] {
                get {
                    return ((AnswerRow)(this.Rows[index]));
                }
            }
            
            public event AnswerRowChangeEventHandler AnswerRowChanged;
            
            public event AnswerRowChangeEventHandler AnswerRowChanging;
            
            public event AnswerRowChangeEventHandler AnswerRowDeleted;
            
            public event AnswerRowChangeEventHandler AnswerRowDeleting;
            
            public void AddAnswerRow(AnswerRow row) {
                this.Rows.Add(row);
            }
            
            public AnswerRow AddAnswerRow(int AnswerID, string Answer, string VoterAnswer, int VoterId, int QuestionId, int SectionNumber) {
                AnswerRow rowAnswerRow = ((AnswerRow)(this.NewRow()));
                rowAnswerRow.ItemArray = new object[] {
                        AnswerID,
                        Answer,
                        VoterAnswer,
                        VoterId,
                        QuestionId,
                        SectionNumber};
                this.Rows.Add(rowAnswerRow);
                return rowAnswerRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                AnswerDataTable cln = ((AnswerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new AnswerDataTable();
            }
            
            internal void InitVars() {
                this.columnAnswerID = this.Columns["AnswerID"];
                this.columnAnswer = this.Columns["Answer"];
                this.columnVoterAnswer = this.Columns["VoterAnswer"];
                this.columnVoterId = this.Columns["VoterId"];
                this.columnQuestionId = this.Columns["QuestionId"];
                this.columnSectionNumber = this.Columns["SectionNumber"];
            }
            
            private void InitClass() {
                this.columnAnswerID = new DataColumn("AnswerID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAnswerID);
                this.columnAnswer = new DataColumn("Answer", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAnswer);
                this.columnVoterAnswer = new DataColumn("VoterAnswer", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVoterAnswer);
                this.columnVoterId = new DataColumn("VoterId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVoterId);
                this.columnQuestionId = new DataColumn("QuestionId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnQuestionId);
                this.columnSectionNumber = new DataColumn("SectionNumber", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSectionNumber);
                this.columnAnswerID.AllowDBNull = false;
                this.columnVoterId.AllowDBNull = false;
            }
            
            public AnswerRow NewAnswerRow() {
                return ((AnswerRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new AnswerRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(AnswerRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AnswerRowChanged != null)) {
                    this.AnswerRowChanged(this, new AnswerRowChangeEvent(((AnswerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AnswerRowChanging != null)) {
                    this.AnswerRowChanging(this, new AnswerRowChangeEvent(((AnswerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AnswerRowDeleted != null)) {
                    this.AnswerRowDeleted(this, new AnswerRowChangeEvent(((AnswerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AnswerRowDeleting != null)) {
                    this.AnswerRowDeleting(this, new AnswerRowChangeEvent(((AnswerRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAnswerRow(AnswerRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AnswerRow : DataRow {
            
            private AnswerDataTable tableAnswer;
            
            internal AnswerRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableAnswer = ((AnswerDataTable)(this.Table));
            }
            
            public int AnswerID {
                get {
                    return ((int)(this[this.tableAnswer.AnswerIDColumn]));
                }
                set {
                    this[this.tableAnswer.AnswerIDColumn] = value;
                }
            }
            
            public string Answer {
                get {
                    try {
                        return ((string)(this[this.tableAnswer.AnswerColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAnswer.AnswerColumn] = value;
                }
            }
            
            public string VoterAnswer {
                get {
                    try {
                        return ((string)(this[this.tableAnswer.VoterAnswerColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAnswer.VoterAnswerColumn] = value;
                }
            }
            
            public int VoterId {
                get {
                    return ((int)(this[this.tableAnswer.VoterIdColumn]));
                }
                set {
                    this[this.tableAnswer.VoterIdColumn] = value;
                }
            }
            
            public int QuestionId {
                get {
                    try {
                        return ((int)(this[this.tableAnswer.QuestionIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAnswer.QuestionIdColumn] = value;
                }
            }
            
            public int SectionNumber {
                get {
                    try {
                        return ((int)(this[this.tableAnswer.SectionNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAnswer.SectionNumberColumn] = value;
                }
            }
            
            public QuestionRow QuestionRowParent {
                get {
                    return ((QuestionRow)(this.GetParentRow(this.Table.ParentRelations["QuestionAnswer"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["QuestionAnswer"]);
                }
            }
            
            public bool IsAnswerNull() {
                return this.IsNull(this.tableAnswer.AnswerColumn);
            }
            
            public void SetAnswerNull() {
                this[this.tableAnswer.AnswerColumn] = System.Convert.DBNull;
            }
            
            public bool IsVoterAnswerNull() {
                return this.IsNull(this.tableAnswer.VoterAnswerColumn);
            }
            
            public void SetVoterAnswerNull() {
                this[this.tableAnswer.VoterAnswerColumn] = System.Convert.DBNull;
            }
            
            public bool IsQuestionIdNull() {
                return this.IsNull(this.tableAnswer.QuestionIdColumn);
            }
            
            public void SetQuestionIdNull() {
                this[this.tableAnswer.QuestionIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsSectionNumberNull() {
                return this.IsNull(this.tableAnswer.SectionNumberColumn);
            }
            
            public void SetSectionNumberNull() {
                this[this.tableAnswer.SectionNumberColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AnswerRowChangeEvent : EventArgs {
            
            private AnswerRow eventRow;
            
            private DataRowAction eventAction;
            
            public AnswerRowChangeEvent(AnswerRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AnswerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
